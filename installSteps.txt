For intstalling on linux (WSL/bash on Windows, edit windows files through /mnt/c)

# WINDOWS
==========
choco upgrade -y neovim llvm git cmake fd ripgrep fzf
follow this for git ssh: https://dev.to/bdbch/setting-up-ssh-and-git-on-windows-10-2khk

# FZF
=====
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install

# FD
====
cd; mkdir deb; cd deb;
curl -LO https://github.com/sharkdp/fd/releases/download/v8.2.1/fd_8.2.1_amd64.deb
sudo dpkg -i fd_8.2.1_amd64.deb

# RIPGREP
=========
cd; mkdir deb; cd deb;
curl -LO https://github.com/BurntSushi/ripgrep/releases/download/12.1.1/ripgrep_12.1.1_amd64.deb
sudo dpkg -i ripgrep_12.1.1_amd64.deb

# RUST
======
if you need to build rust stuff from source or get them off of cargo
curl https://sh.rustup.rs -sSf | sh
pick option 1
restart bash terminal
source $HOME/.cargo/env
make sure intstalled:
rustc --version
cargo --version
example installing code-minimap:
cargo install --locked code-minimap

# VIM FILES
===========
cd; git clone https://github.com/loshjawrence/vim.git
cp vim/.bash* .; cp vim/.vimrc .; cp vim/.gitconfig .;
mkdir .config/nvim; cp vim/*init.vim .config/nvim;
mkdir .vim; cp -r vim/vimfiles/colors .vim/

# PYTHON MODULES REQS
=====================
// see: https://neovim.io/doc/user/provider.html
// see https://linuxize.com/post/how-to-install-pip-on-ubuntu-20.04/
sudo apt update -y
sudo apt install -y python-dev python-pip python3-dev python3-pip
python2 -m pip install --user --upgrade pip pynvim
python3 -m pip install --user --upgrade pip pynvim
pip3 install pynvim

# Getting snap to work on wsl2:
https://github.com/microsoft/WSL/issues/5126

# PERL MODULES REQS
===================
sudo apt update -y
sudo apt install -y perl cpanminus
sudo cpanm -n Neovim::Ext

# INSTALL NEOVIM:
================
working: 2ecf0a4c6183bba1c65d440711038f040d355fef
0.5 release: 62d67de598286734536b63807d6b0f4e82b34128
//https://github.com/neovim/neovim/wiki/Building-Neovim#build-prerequisites
//https://github.com/neovim/neovim/wiki/Installing-Neovim#install-from-source
//https://github.com/neovim/neovim/wiki/Building-Neovim
cd; mkdir clones; cd clones; git clone https://github.com/neovim/neovim.git; cd neovim
sudo apt update -y
sudo apt install -y ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip
rm -rf build
make distclean
make CMAKE_BUILD_TYPE=Release
sudo make install

# May have to do this for the treesitter stuff
:TSUinstall all


# UNINSTALL NEOVIM:
===================
sudo rm /usr/local/bin/nvim
sudo rm -r /usr/local/share/nvim/

# VIM-PLUG
==========
https://github.com/junegunn/vim-plug

# Universal Ctags
=================
// https://github.com/universal-ctags/ctags/blob/master/docs/autotools.rst
// DOCS ON HOW TO USE/CONFIG: https://buildmedia.readthedocs.org/media/pdf/ctags/latest/ctags.pdf
cd; mkdir clones; cd clones; git clone https://github.com/universal-ctags/ctags.git
cd; cd clones/ctags;
./autogen.sh
./configure
make
sudo make install
ctags --version

# language servers
==================
most can be installed with :LspInstall <ls name>
    clangd:
    linux: `sudo apt update -y; sudo apt install -y clangd`
    pip3 install cmake-language-server
    pip3 install python-language-server
    npm install -g bash-language-server
    npm install -g vim-language-server
    npm install -g json-language-server
    npm install -g typescript-language-server

    https://github.com/sumneko/lua-language-server/wiki/Build-and-Run-(Standalone)
    cd; cd clones; git clone https://github.com/sumneko/lua-language-server;
    cd lua-language-server
    git submodule update --init --recursive
    cd 3rd/luamake
    ninja -f ninja/linux.ninja
    cd ../..
    ./3rd/luamake/luamake rebuild
    ./bin/Linux/lua-language-server -E ./main.lua

    https://github.com/svenstaro/glsl-language-server
    cd; cd clones; git clone git@github.com:svenstaro/glsl-language-server.git
    cd glsl-language-server
    git submodule update --init
    cmake -Bbuild -GNinja
    ninja -Cbuild

    # Clangd
    ========
    // 10 doesnt work, 12 does-ish
    // https://clangd.llvm.org/installation.html
    // NOTE: if on ubuntu 20.04, clangd package is version 10
    sudo apt remove -y clangd-9 clang-9 clangd-10 clang-10
    sudo apt autoremove -y
    sudo apt update -y; sudo apt install -y clangd-12 clang-12 clang-format-12 clang-tidy-12

    sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-12 100
    sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-12 100
    sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-12 100
    sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 100
    sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-12 100

    # NVM
    =====
    // https://github.com/nvm-sh/nvm#installing-and-updating
    // dont worry about it saying some lines exists already in your bashrc
    sudo apt install curl
    curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
    source ~/.profile
    nvm install node
    node --version

    # WSL
    =====
    upgrade ubuntu in place: https://alessio.franceschelli.me/posts/windows/wsl2-upgrade/

    go to microsoft store. hit winkey and search store
    download the latest LTS ubuntu and windows terminal
    update windows 10 to version 2004 or higher
    upgrade to WSL 2
    go to settings location and make ubuntu default. hide azure and cmd.
    /mnt/c/Users/loshj/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json



    Open nvim and do a :PlugInstall
